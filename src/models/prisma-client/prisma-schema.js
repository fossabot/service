module.exports = {
  // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  typeDefs:
    // Please don't change this file manually but run `prisma generate` to update it.
    // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

    /* GraphQL */ `
      type Account {
        id: UUID!
        username: String!
        password: String!
        email: String!
        role: Role!
        status: AccountStatus
        settings: Json
        users(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [User!]
        posts(
          where: PostWhereInput
          orderBy: PostOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Post!]
        pets(
          where: PetWhereInput
          orderBy: PetOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Pet!]
        images(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Image!]
        comments(
          where: CommentWhereInput
          orderBy: CommentOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Comment!]
        reviews(
          where: ReviewWhereInput
          orderBy: ReviewOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Review!]
        petImages(
          where: PetImageWhereInput
          orderBy: PetImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [PetImage!]
        like(
          where: LikeWhereInput
          orderBy: LikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Like!]
        reports(
          where: ReportWhereInput
          orderBy: ReportOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Report!]
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type AccountConnection {
        pageInfo: PageInfo!
        edges: [AccountEdge]!
        aggregate: AggregateAccount!
      }

      input AccountCreateInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateOneWithoutCommentsInput {
        create: AccountCreateWithoutCommentsInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutImagesInput {
        create: AccountCreateWithoutImagesInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutLikeInput {
        create: AccountCreateWithoutLikeInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutPetImagesInput {
        create: AccountCreateWithoutPetImagesInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutPetsInput {
        create: AccountCreateWithoutPetsInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutPostsInput {
        create: AccountCreateWithoutPostsInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutReportsInput {
        create: AccountCreateWithoutReportsInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutReviewsInput {
        create: AccountCreateWithoutReviewsInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutUsersInput {
        create: AccountCreateWithoutUsersInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateWithoutCommentsInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutImagesInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutLikeInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutPetImagesInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutPetsInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutPostsInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutReportsInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
      }

      input AccountCreateWithoutReviewsInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        users: UserCreateManyWithoutAccountInput
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      input AccountCreateWithoutUsersInput {
        id: UUID
        username: String!
        password: String!
        email: String!
        role: Role
        status: AccountStatus
        settings: Json
        posts: PostCreateManyWithoutAccountInput
        pets: PetCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
        comments: CommentCreateManyWithoutCreatedByInput
        reviews: ReviewCreateManyWithoutCreatedByInput
        petImages: PetImageCreateManyWithoutAccountInput
        like: LikeCreateManyWithoutAccountInput
        reports: ReportCreateManyWithoutCreatedByInput
      }

      type AccountEdge {
        node: Account!
        cursor: String!
      }

      enum AccountOrderByInput {
        id_ASC
        id_DESC
        username_ASC
        username_DESC
        password_ASC
        password_DESC
        email_ASC
        email_DESC
        role_ASC
        role_DESC
        status_ASC
        status_DESC
        settings_ASC
        settings_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type AccountPreviousValues {
        id: UUID!
        username: String!
        password: String!
        email: String!
        role: Role!
        status: AccountStatus
        settings: Json
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      enum AccountStatus {
        Pending
        Active
        Deactive
      }

      type AccountSubscriptionPayload {
        mutation: MutationType!
        node: Account
        updatedFields: [String!]
        previousValues: AccountPreviousValues
      }

      input AccountSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: AccountWhereInput
        AND: [AccountSubscriptionWhereInput!]
        OR: [AccountSubscriptionWhereInput!]
        NOT: [AccountSubscriptionWhereInput!]
      }

      input AccountUpdateInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateManyMutationInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
      }

      input AccountUpdateOneRequiredWithoutCommentsInput {
        create: AccountCreateWithoutCommentsInput
        update: AccountUpdateWithoutCommentsDataInput
        upsert: AccountUpsertWithoutCommentsInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutImagesInput {
        create: AccountCreateWithoutImagesInput
        update: AccountUpdateWithoutImagesDataInput
        upsert: AccountUpsertWithoutImagesInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutLikeInput {
        create: AccountCreateWithoutLikeInput
        update: AccountUpdateWithoutLikeDataInput
        upsert: AccountUpsertWithoutLikeInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutPetImagesInput {
        create: AccountCreateWithoutPetImagesInput
        update: AccountUpdateWithoutPetImagesDataInput
        upsert: AccountUpsertWithoutPetImagesInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutPetsInput {
        create: AccountCreateWithoutPetsInput
        update: AccountUpdateWithoutPetsDataInput
        upsert: AccountUpsertWithoutPetsInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutPostsInput {
        create: AccountCreateWithoutPostsInput
        update: AccountUpdateWithoutPostsDataInput
        upsert: AccountUpsertWithoutPostsInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutReportsInput {
        create: AccountCreateWithoutReportsInput
        update: AccountUpdateWithoutReportsDataInput
        upsert: AccountUpsertWithoutReportsInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutReviewsInput {
        create: AccountCreateWithoutReviewsInput
        update: AccountUpdateWithoutReviewsDataInput
        upsert: AccountUpsertWithoutReviewsInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutUsersInput {
        create: AccountCreateWithoutUsersInput
        update: AccountUpdateWithoutUsersDataInput
        upsert: AccountUpsertWithoutUsersInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateWithoutCommentsDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutImagesDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutLikeDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutPetImagesDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutPetsDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutPostsDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutReportsDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
      }

      input AccountUpdateWithoutReviewsDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        users: UserUpdateManyWithoutAccountInput
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpdateWithoutUsersDataInput {
        username: String
        password: String
        email: String
        role: Role
        status: AccountStatus
        settings: Json
        posts: PostUpdateManyWithoutAccountInput
        pets: PetUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
        comments: CommentUpdateManyWithoutCreatedByInput
        reviews: ReviewUpdateManyWithoutCreatedByInput
        petImages: PetImageUpdateManyWithoutAccountInput
        like: LikeUpdateManyWithoutAccountInput
        reports: ReportUpdateManyWithoutCreatedByInput
      }

      input AccountUpsertWithoutCommentsInput {
        update: AccountUpdateWithoutCommentsDataInput!
        create: AccountCreateWithoutCommentsInput!
      }

      input AccountUpsertWithoutImagesInput {
        update: AccountUpdateWithoutImagesDataInput!
        create: AccountCreateWithoutImagesInput!
      }

      input AccountUpsertWithoutLikeInput {
        update: AccountUpdateWithoutLikeDataInput!
        create: AccountCreateWithoutLikeInput!
      }

      input AccountUpsertWithoutPetImagesInput {
        update: AccountUpdateWithoutPetImagesDataInput!
        create: AccountCreateWithoutPetImagesInput!
      }

      input AccountUpsertWithoutPetsInput {
        update: AccountUpdateWithoutPetsDataInput!
        create: AccountCreateWithoutPetsInput!
      }

      input AccountUpsertWithoutPostsInput {
        update: AccountUpdateWithoutPostsDataInput!
        create: AccountCreateWithoutPostsInput!
      }

      input AccountUpsertWithoutReportsInput {
        update: AccountUpdateWithoutReportsDataInput!
        create: AccountCreateWithoutReportsInput!
      }

      input AccountUpsertWithoutReviewsInput {
        update: AccountUpdateWithoutReviewsDataInput!
        create: AccountCreateWithoutReviewsInput!
      }

      input AccountUpsertWithoutUsersInput {
        update: AccountUpdateWithoutUsersDataInput!
        create: AccountCreateWithoutUsersInput!
      }

      input AccountWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        username: String
        username_not: String
        username_in: [String!]
        username_not_in: [String!]
        username_lt: String
        username_lte: String
        username_gt: String
        username_gte: String
        username_contains: String
        username_not_contains: String
        username_starts_with: String
        username_not_starts_with: String
        username_ends_with: String
        username_not_ends_with: String
        password: String
        password_not: String
        password_in: [String!]
        password_not_in: [String!]
        password_lt: String
        password_lte: String
        password_gt: String
        password_gte: String
        password_contains: String
        password_not_contains: String
        password_starts_with: String
        password_not_starts_with: String
        password_ends_with: String
        password_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        role: Role
        role_not: Role
        role_in: [Role!]
        role_not_in: [Role!]
        status: AccountStatus
        status_not: AccountStatus
        status_in: [AccountStatus!]
        status_not_in: [AccountStatus!]
        users_every: UserWhereInput
        users_some: UserWhereInput
        users_none: UserWhereInput
        posts_every: PostWhereInput
        posts_some: PostWhereInput
        posts_none: PostWhereInput
        pets_every: PetWhereInput
        pets_some: PetWhereInput
        pets_none: PetWhereInput
        images_every: ImageWhereInput
        images_some: ImageWhereInput
        images_none: ImageWhereInput
        comments_every: CommentWhereInput
        comments_some: CommentWhereInput
        comments_none: CommentWhereInput
        reviews_every: ReviewWhereInput
        reviews_some: ReviewWhereInput
        reviews_none: ReviewWhereInput
        petImages_every: PetImageWhereInput
        petImages_some: PetImageWhereInput
        petImages_none: PetImageWhereInput
        like_every: LikeWhereInput
        like_some: LikeWhereInput
        like_none: LikeWhereInput
        reports_every: ReportWhereInput
        reports_some: ReportWhereInput
        reports_none: ReportWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [AccountWhereInput!]
        OR: [AccountWhereInput!]
        NOT: [AccountWhereInput!]
      }

      input AccountWhereUniqueInput {
        id: UUID
        username: String
        email: String
      }

      type AggregateAccount {
        count: Int!
      }

      type AggregateComment {
        count: Int!
      }

      type AggregateCommentLike {
        count: Int!
      }

      type AggregateImage {
        count: Int!
      }

      type AggregateLike {
        count: Int!
      }

      type AggregatePet {
        count: Int!
      }

      type AggregatePetImage {
        count: Int!
      }

      type AggregatePost {
        count: Int!
      }

      type AggregatePostLike {
        count: Int!
      }

      type AggregatePostTag {
        count: Int!
      }

      type AggregateReport {
        count: Int!
      }

      type AggregateReview {
        count: Int!
      }

      type AggregateReviewLike {
        count: Int!
      }

      type AggregateTag {
        count: Int!
      }

      type AggregateUser {
        count: Int!
      }

      type BatchPayload {
        count: Long!
      }

      type Comment {
        id: UUID!
        message: String!
        image: Image
        likes: Int!
        post: Post!
        createdBy: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type CommentConnection {
        pageInfo: PageInfo!
        edges: [CommentEdge]!
        aggregate: AggregateComment!
      }

      input CommentCreateInput {
        id: UUID
        message: String!
        image: ImageCreateOneInput
        likes: Int
        post: PostCreateOneWithoutCommentsInput!
        createdBy: AccountCreateOneWithoutCommentsInput!
      }

      input CommentCreateManyWithoutCreatedByInput {
        create: [CommentCreateWithoutCreatedByInput!]
        connect: [CommentWhereUniqueInput!]
      }

      input CommentCreateManyWithoutPostInput {
        create: [CommentCreateWithoutPostInput!]
        connect: [CommentWhereUniqueInput!]
      }

      input CommentCreateOneInput {
        create: CommentCreateInput
        connect: CommentWhereUniqueInput
      }

      input CommentCreateWithoutCreatedByInput {
        id: UUID
        message: String!
        image: ImageCreateOneInput
        likes: Int
        post: PostCreateOneWithoutCommentsInput!
      }

      input CommentCreateWithoutPostInput {
        id: UUID
        message: String!
        image: ImageCreateOneInput
        likes: Int
        createdBy: AccountCreateOneWithoutCommentsInput!
      }

      type CommentEdge {
        node: Comment!
        cursor: String!
      }

      type CommentLike {
        id: UUID!
        comment: Comment!
        like: Like!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type CommentLikeConnection {
        pageInfo: PageInfo!
        edges: [CommentLikeEdge]!
        aggregate: AggregateCommentLike!
      }

      input CommentLikeCreateInput {
        id: UUID
        comment: CommentCreateOneInput!
        like: LikeCreateOneInput!
      }

      type CommentLikeEdge {
        node: CommentLike!
        cursor: String!
      }

      enum CommentLikeOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type CommentLikePreviousValues {
        id: UUID!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type CommentLikeSubscriptionPayload {
        mutation: MutationType!
        node: CommentLike
        updatedFields: [String!]
        previousValues: CommentLikePreviousValues
      }

      input CommentLikeSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: CommentLikeWhereInput
        AND: [CommentLikeSubscriptionWhereInput!]
        OR: [CommentLikeSubscriptionWhereInput!]
        NOT: [CommentLikeSubscriptionWhereInput!]
      }

      input CommentLikeUpdateInput {
        comment: CommentUpdateOneRequiredInput
        like: LikeUpdateOneRequiredInput
      }

      input CommentLikeWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        comment: CommentWhereInput
        like: LikeWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [CommentLikeWhereInput!]
        OR: [CommentLikeWhereInput!]
        NOT: [CommentLikeWhereInput!]
      }

      input CommentLikeWhereUniqueInput {
        id: UUID
      }

      enum CommentOrderByInput {
        id_ASC
        id_DESC
        message_ASC
        message_DESC
        likes_ASC
        likes_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type CommentPreviousValues {
        id: UUID!
        message: String!
        likes: Int!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input CommentScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        message: String
        message_not: String
        message_in: [String!]
        message_not_in: [String!]
        message_lt: String
        message_lte: String
        message_gt: String
        message_gte: String
        message_contains: String
        message_not_contains: String
        message_starts_with: String
        message_not_starts_with: String
        message_ends_with: String
        message_not_ends_with: String
        likes: Int
        likes_not: Int
        likes_in: [Int!]
        likes_not_in: [Int!]
        likes_lt: Int
        likes_lte: Int
        likes_gt: Int
        likes_gte: Int
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [CommentScalarWhereInput!]
        OR: [CommentScalarWhereInput!]
        NOT: [CommentScalarWhereInput!]
      }

      type CommentSubscriptionPayload {
        mutation: MutationType!
        node: Comment
        updatedFields: [String!]
        previousValues: CommentPreviousValues
      }

      input CommentSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: CommentWhereInput
        AND: [CommentSubscriptionWhereInput!]
        OR: [CommentSubscriptionWhereInput!]
        NOT: [CommentSubscriptionWhereInput!]
      }

      input CommentUpdateDataInput {
        message: String
        image: ImageUpdateOneInput
        likes: Int
        post: PostUpdateOneRequiredWithoutCommentsInput
        createdBy: AccountUpdateOneRequiredWithoutCommentsInput
      }

      input CommentUpdateInput {
        message: String
        image: ImageUpdateOneInput
        likes: Int
        post: PostUpdateOneRequiredWithoutCommentsInput
        createdBy: AccountUpdateOneRequiredWithoutCommentsInput
      }

      input CommentUpdateManyDataInput {
        message: String
        likes: Int
      }

      input CommentUpdateManyMutationInput {
        message: String
        likes: Int
      }

      input CommentUpdateManyWithoutCreatedByInput {
        create: [CommentCreateWithoutCreatedByInput!]
        delete: [CommentWhereUniqueInput!]
        connect: [CommentWhereUniqueInput!]
        set: [CommentWhereUniqueInput!]
        disconnect: [CommentWhereUniqueInput!]
        update: [CommentUpdateWithWhereUniqueWithoutCreatedByInput!]
        upsert: [CommentUpsertWithWhereUniqueWithoutCreatedByInput!]
        deleteMany: [CommentScalarWhereInput!]
        updateMany: [CommentUpdateManyWithWhereNestedInput!]
      }

      input CommentUpdateManyWithoutPostInput {
        create: [CommentCreateWithoutPostInput!]
        delete: [CommentWhereUniqueInput!]
        connect: [CommentWhereUniqueInput!]
        set: [CommentWhereUniqueInput!]
        disconnect: [CommentWhereUniqueInput!]
        update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
        upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
        deleteMany: [CommentScalarWhereInput!]
        updateMany: [CommentUpdateManyWithWhereNestedInput!]
      }

      input CommentUpdateManyWithWhereNestedInput {
        where: CommentScalarWhereInput!
        data: CommentUpdateManyDataInput!
      }

      input CommentUpdateOneRequiredInput {
        create: CommentCreateInput
        update: CommentUpdateDataInput
        upsert: CommentUpsertNestedInput
        connect: CommentWhereUniqueInput
      }

      input CommentUpdateWithoutCreatedByDataInput {
        message: String
        image: ImageUpdateOneInput
        likes: Int
        post: PostUpdateOneRequiredWithoutCommentsInput
      }

      input CommentUpdateWithoutPostDataInput {
        message: String
        image: ImageUpdateOneInput
        likes: Int
        createdBy: AccountUpdateOneRequiredWithoutCommentsInput
      }

      input CommentUpdateWithWhereUniqueWithoutCreatedByInput {
        where: CommentWhereUniqueInput!
        data: CommentUpdateWithoutCreatedByDataInput!
      }

      input CommentUpdateWithWhereUniqueWithoutPostInput {
        where: CommentWhereUniqueInput!
        data: CommentUpdateWithoutPostDataInput!
      }

      input CommentUpsertNestedInput {
        update: CommentUpdateDataInput!
        create: CommentCreateInput!
      }

      input CommentUpsertWithWhereUniqueWithoutCreatedByInput {
        where: CommentWhereUniqueInput!
        update: CommentUpdateWithoutCreatedByDataInput!
        create: CommentCreateWithoutCreatedByInput!
      }

      input CommentUpsertWithWhereUniqueWithoutPostInput {
        where: CommentWhereUniqueInput!
        update: CommentUpdateWithoutPostDataInput!
        create: CommentCreateWithoutPostInput!
      }

      input CommentWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        message: String
        message_not: String
        message_in: [String!]
        message_not_in: [String!]
        message_lt: String
        message_lte: String
        message_gt: String
        message_gte: String
        message_contains: String
        message_not_contains: String
        message_starts_with: String
        message_not_starts_with: String
        message_ends_with: String
        message_not_ends_with: String
        image: ImageWhereInput
        likes: Int
        likes_not: Int
        likes_in: [Int!]
        likes_not_in: [Int!]
        likes_lt: Int
        likes_lte: Int
        likes_gt: Int
        likes_gte: Int
        post: PostWhereInput
        createdBy: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [CommentWhereInput!]
        OR: [CommentWhereInput!]
        NOT: [CommentWhereInput!]
      }

      input CommentWhereUniqueInput {
        id: UUID
      }

      scalar DateTime

      type Image {
        id: UUID!
        publicId: String!
        url: String!
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type ImageConnection {
        pageInfo: PageInfo!
        edges: [ImageEdge]!
        aggregate: AggregateImage!
      }

      input ImageCreateInput {
        id: UUID
        publicId: String!
        url: String!
        account: AccountCreateOneWithoutImagesInput!
      }

      input ImageCreateManyWithoutAccountInput {
        create: [ImageCreateWithoutAccountInput!]
        connect: [ImageWhereUniqueInput!]
      }

      input ImageCreateOneInput {
        create: ImageCreateInput
        connect: ImageWhereUniqueInput
      }

      input ImageCreateWithoutAccountInput {
        id: UUID
        publicId: String!
        url: String!
      }

      type ImageEdge {
        node: Image!
        cursor: String!
      }

      enum ImageOrderByInput {
        id_ASC
        id_DESC
        publicId_ASC
        publicId_DESC
        url_ASC
        url_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type ImagePreviousValues {
        id: UUID!
        publicId: String!
        url: String!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input ImageScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        publicId: String
        publicId_not: String
        publicId_in: [String!]
        publicId_not_in: [String!]
        publicId_lt: String
        publicId_lte: String
        publicId_gt: String
        publicId_gte: String
        publicId_contains: String
        publicId_not_contains: String
        publicId_starts_with: String
        publicId_not_starts_with: String
        publicId_ends_with: String
        publicId_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ImageScalarWhereInput!]
        OR: [ImageScalarWhereInput!]
        NOT: [ImageScalarWhereInput!]
      }

      type ImageSubscriptionPayload {
        mutation: MutationType!
        node: Image
        updatedFields: [String!]
        previousValues: ImagePreviousValues
      }

      input ImageSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ImageWhereInput
        AND: [ImageSubscriptionWhereInput!]
        OR: [ImageSubscriptionWhereInput!]
        NOT: [ImageSubscriptionWhereInput!]
      }

      input ImageUpdateDataInput {
        publicId: String
        url: String
        account: AccountUpdateOneRequiredWithoutImagesInput
      }

      input ImageUpdateInput {
        publicId: String
        url: String
        account: AccountUpdateOneRequiredWithoutImagesInput
      }

      input ImageUpdateManyDataInput {
        publicId: String
        url: String
      }

      input ImageUpdateManyMutationInput {
        publicId: String
        url: String
      }

      input ImageUpdateManyWithoutAccountInput {
        create: [ImageCreateWithoutAccountInput!]
        delete: [ImageWhereUniqueInput!]
        connect: [ImageWhereUniqueInput!]
        set: [ImageWhereUniqueInput!]
        disconnect: [ImageWhereUniqueInput!]
        update: [ImageUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [ImageUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [ImageScalarWhereInput!]
        updateMany: [ImageUpdateManyWithWhereNestedInput!]
      }

      input ImageUpdateManyWithWhereNestedInput {
        where: ImageScalarWhereInput!
        data: ImageUpdateManyDataInput!
      }

      input ImageUpdateOneInput {
        create: ImageCreateInput
        update: ImageUpdateDataInput
        upsert: ImageUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
        connect: ImageWhereUniqueInput
      }

      input ImageUpdateOneRequiredInput {
        create: ImageCreateInput
        update: ImageUpdateDataInput
        upsert: ImageUpsertNestedInput
        connect: ImageWhereUniqueInput
      }

      input ImageUpdateWithoutAccountDataInput {
        publicId: String
        url: String
      }

      input ImageUpdateWithWhereUniqueWithoutAccountInput {
        where: ImageWhereUniqueInput!
        data: ImageUpdateWithoutAccountDataInput!
      }

      input ImageUpsertNestedInput {
        update: ImageUpdateDataInput!
        create: ImageCreateInput!
      }

      input ImageUpsertWithWhereUniqueWithoutAccountInput {
        where: ImageWhereUniqueInput!
        update: ImageUpdateWithoutAccountDataInput!
        create: ImageCreateWithoutAccountInput!
      }

      input ImageWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        publicId: String
        publicId_not: String
        publicId_in: [String!]
        publicId_not_in: [String!]
        publicId_lt: String
        publicId_lte: String
        publicId_gt: String
        publicId_gte: String
        publicId_contains: String
        publicId_not_contains: String
        publicId_starts_with: String
        publicId_not_starts_with: String
        publicId_ends_with: String
        publicId_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ImageWhereInput!]
        OR: [ImageWhereInput!]
        NOT: [ImageWhereInput!]
      }

      input ImageWhereUniqueInput {
        id: UUID
        publicId: String
      }

      scalar Json

      type Like {
        id: UUID!
        count: Int!
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type LikeConnection {
        pageInfo: PageInfo!
        edges: [LikeEdge]!
        aggregate: AggregateLike!
      }

      input LikeCreateInput {
        id: UUID
        count: Int
        account: AccountCreateOneWithoutLikeInput!
      }

      input LikeCreateManyWithoutAccountInput {
        create: [LikeCreateWithoutAccountInput!]
        connect: [LikeWhereUniqueInput!]
      }

      input LikeCreateOneInput {
        create: LikeCreateInput
        connect: LikeWhereUniqueInput
      }

      input LikeCreateWithoutAccountInput {
        id: UUID
        count: Int
      }

      type LikeEdge {
        node: Like!
        cursor: String!
      }

      enum LikeOrderByInput {
        id_ASC
        id_DESC
        count_ASC
        count_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type LikePreviousValues {
        id: UUID!
        count: Int!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input LikeScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        count: Int
        count_not: Int
        count_in: [Int!]
        count_not_in: [Int!]
        count_lt: Int
        count_lte: Int
        count_gt: Int
        count_gte: Int
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [LikeScalarWhereInput!]
        OR: [LikeScalarWhereInput!]
        NOT: [LikeScalarWhereInput!]
      }

      type LikeSubscriptionPayload {
        mutation: MutationType!
        node: Like
        updatedFields: [String!]
        previousValues: LikePreviousValues
      }

      input LikeSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: LikeWhereInput
        AND: [LikeSubscriptionWhereInput!]
        OR: [LikeSubscriptionWhereInput!]
        NOT: [LikeSubscriptionWhereInput!]
      }

      input LikeUpdateDataInput {
        count: Int
        account: AccountUpdateOneRequiredWithoutLikeInput
      }

      input LikeUpdateInput {
        count: Int
        account: AccountUpdateOneRequiredWithoutLikeInput
      }

      input LikeUpdateManyDataInput {
        count: Int
      }

      input LikeUpdateManyMutationInput {
        count: Int
      }

      input LikeUpdateManyWithoutAccountInput {
        create: [LikeCreateWithoutAccountInput!]
        delete: [LikeWhereUniqueInput!]
        connect: [LikeWhereUniqueInput!]
        set: [LikeWhereUniqueInput!]
        disconnect: [LikeWhereUniqueInput!]
        update: [LikeUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [LikeUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [LikeScalarWhereInput!]
        updateMany: [LikeUpdateManyWithWhereNestedInput!]
      }

      input LikeUpdateManyWithWhereNestedInput {
        where: LikeScalarWhereInput!
        data: LikeUpdateManyDataInput!
      }

      input LikeUpdateOneRequiredInput {
        create: LikeCreateInput
        update: LikeUpdateDataInput
        upsert: LikeUpsertNestedInput
        connect: LikeWhereUniqueInput
      }

      input LikeUpdateWithoutAccountDataInput {
        count: Int
      }

      input LikeUpdateWithWhereUniqueWithoutAccountInput {
        where: LikeWhereUniqueInput!
        data: LikeUpdateWithoutAccountDataInput!
      }

      input LikeUpsertNestedInput {
        update: LikeUpdateDataInput!
        create: LikeCreateInput!
      }

      input LikeUpsertWithWhereUniqueWithoutAccountInput {
        where: LikeWhereUniqueInput!
        update: LikeUpdateWithoutAccountDataInput!
        create: LikeCreateWithoutAccountInput!
      }

      input LikeWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        count: Int
        count_not: Int
        count_in: [Int!]
        count_not_in: [Int!]
        count_lt: Int
        count_lte: Int
        count_gt: Int
        count_gte: Int
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [LikeWhereInput!]
        OR: [LikeWhereInput!]
        NOT: [LikeWhereInput!]
      }

      input LikeWhereUniqueInput {
        id: UUID
      }

      scalar Long

      type Mutation {
        createAccount(data: AccountCreateInput!): Account!
        updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
        updateManyAccounts(
          data: AccountUpdateManyMutationInput!
          where: AccountWhereInput
        ): BatchPayload!
        upsertAccount(
          where: AccountWhereUniqueInput!
          create: AccountCreateInput!
          update: AccountUpdateInput!
        ): Account!
        deleteAccount(where: AccountWhereUniqueInput!): Account
        deleteManyAccounts(where: AccountWhereInput): BatchPayload!
        createComment(data: CommentCreateInput!): Comment!
        updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
        updateManyComments(
          data: CommentUpdateManyMutationInput!
          where: CommentWhereInput
        ): BatchPayload!
        upsertComment(
          where: CommentWhereUniqueInput!
          create: CommentCreateInput!
          update: CommentUpdateInput!
        ): Comment!
        deleteComment(where: CommentWhereUniqueInput!): Comment
        deleteManyComments(where: CommentWhereInput): BatchPayload!
        createCommentLike(data: CommentLikeCreateInput!): CommentLike!
        updateCommentLike(
          data: CommentLikeUpdateInput!
          where: CommentLikeWhereUniqueInput!
        ): CommentLike
        upsertCommentLike(
          where: CommentLikeWhereUniqueInput!
          create: CommentLikeCreateInput!
          update: CommentLikeUpdateInput!
        ): CommentLike!
        deleteCommentLike(where: CommentLikeWhereUniqueInput!): CommentLike
        deleteManyCommentLikes(where: CommentLikeWhereInput): BatchPayload!
        createImage(data: ImageCreateInput!): Image!
        updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
        updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
        upsertImage(
          where: ImageWhereUniqueInput!
          create: ImageCreateInput!
          update: ImageUpdateInput!
        ): Image!
        deleteImage(where: ImageWhereUniqueInput!): Image
        deleteManyImages(where: ImageWhereInput): BatchPayload!
        createLike(data: LikeCreateInput!): Like!
        updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
        updateManyLikes(data: LikeUpdateManyMutationInput!, where: LikeWhereInput): BatchPayload!
        upsertLike(
          where: LikeWhereUniqueInput!
          create: LikeCreateInput!
          update: LikeUpdateInput!
        ): Like!
        deleteLike(where: LikeWhereUniqueInput!): Like
        deleteManyLikes(where: LikeWhereInput): BatchPayload!
        createPet(data: PetCreateInput!): Pet!
        updatePet(data: PetUpdateInput!, where: PetWhereUniqueInput!): Pet
        updateManyPets(data: PetUpdateManyMutationInput!, where: PetWhereInput): BatchPayload!
        upsertPet(
          where: PetWhereUniqueInput!
          create: PetCreateInput!
          update: PetUpdateInput!
        ): Pet!
        deletePet(where: PetWhereUniqueInput!): Pet
        deleteManyPets(where: PetWhereInput): BatchPayload!
        createPetImage(data: PetImageCreateInput!): PetImage!
        updatePetImage(data: PetImageUpdateInput!, where: PetImageWhereUniqueInput!): PetImage
        upsertPetImage(
          where: PetImageWhereUniqueInput!
          create: PetImageCreateInput!
          update: PetImageUpdateInput!
        ): PetImage!
        deletePetImage(where: PetImageWhereUniqueInput!): PetImage
        deleteManyPetImages(where: PetImageWhereInput): BatchPayload!
        createPost(data: PostCreateInput!): Post!
        updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
        updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
        upsertPost(
          where: PostWhereUniqueInput!
          create: PostCreateInput!
          update: PostUpdateInput!
        ): Post!
        deletePost(where: PostWhereUniqueInput!): Post
        deleteManyPosts(where: PostWhereInput): BatchPayload!
        createPostLike(data: PostLikeCreateInput!): PostLike!
        updatePostLike(data: PostLikeUpdateInput!, where: PostLikeWhereUniqueInput!): PostLike
        upsertPostLike(
          where: PostLikeWhereUniqueInput!
          create: PostLikeCreateInput!
          update: PostLikeUpdateInput!
        ): PostLike!
        deletePostLike(where: PostLikeWhereUniqueInput!): PostLike
        deleteManyPostLikes(where: PostLikeWhereInput): BatchPayload!
        createPostTag(data: PostTagCreateInput!): PostTag!
        updatePostTag(data: PostTagUpdateInput!, where: PostTagWhereUniqueInput!): PostTag
        upsertPostTag(
          where: PostTagWhereUniqueInput!
          create: PostTagCreateInput!
          update: PostTagUpdateInput!
        ): PostTag!
        deletePostTag(where: PostTagWhereUniqueInput!): PostTag
        deleteManyPostTags(where: PostTagWhereInput): BatchPayload!
        createReport(data: ReportCreateInput!): Report!
        updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
        updateManyReports(
          data: ReportUpdateManyMutationInput!
          where: ReportWhereInput
        ): BatchPayload!
        upsertReport(
          where: ReportWhereUniqueInput!
          create: ReportCreateInput!
          update: ReportUpdateInput!
        ): Report!
        deleteReport(where: ReportWhereUniqueInput!): Report
        deleteManyReports(where: ReportWhereInput): BatchPayload!
        createReview(data: ReviewCreateInput!): Review!
        updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
        updateManyReviews(
          data: ReviewUpdateManyMutationInput!
          where: ReviewWhereInput
        ): BatchPayload!
        upsertReview(
          where: ReviewWhereUniqueInput!
          create: ReviewCreateInput!
          update: ReviewUpdateInput!
        ): Review!
        deleteReview(where: ReviewWhereUniqueInput!): Review
        deleteManyReviews(where: ReviewWhereInput): BatchPayload!
        createReviewLike(data: ReviewLikeCreateInput!): ReviewLike!
        updateReviewLike(
          data: ReviewLikeUpdateInput!
          where: ReviewLikeWhereUniqueInput!
        ): ReviewLike
        upsertReviewLike(
          where: ReviewLikeWhereUniqueInput!
          create: ReviewLikeCreateInput!
          update: ReviewLikeUpdateInput!
        ): ReviewLike!
        deleteReviewLike(where: ReviewLikeWhereUniqueInput!): ReviewLike
        deleteManyReviewLikes(where: ReviewLikeWhereInput): BatchPayload!
        createTag(data: TagCreateInput!): Tag!
        updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
        updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
        upsertTag(
          where: TagWhereUniqueInput!
          create: TagCreateInput!
          update: TagUpdateInput!
        ): Tag!
        deleteTag(where: TagWhereUniqueInput!): Tag
        deleteManyTags(where: TagWhereInput): BatchPayload!
        createUser(data: UserCreateInput!): User!
        updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
        updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
        upsertUser(
          where: UserWhereUniqueInput!
          create: UserCreateInput!
          update: UserUpdateInput!
        ): User!
        deleteUser(where: UserWhereUniqueInput!): User
        deleteManyUsers(where: UserWhereInput): BatchPayload!
      }

      enum MutationType {
        CREATED
        UPDATED
        DELETED
      }

      interface Node {
        id: ID!
      }

      type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
      }

      type Pet {
        id: UUID!
        type: PetType!
        info: Json
        post: Post!
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type PetConnection {
        pageInfo: PageInfo!
        edges: [PetEdge]!
        aggregate: AggregatePet!
      }

      input PetCreateInput {
        id: UUID
        type: PetType!
        info: Json
        post: PostCreateOneInput!
        account: AccountCreateOneWithoutPetsInput!
      }

      input PetCreateManyWithoutAccountInput {
        create: [PetCreateWithoutAccountInput!]
        connect: [PetWhereUniqueInput!]
      }

      input PetCreateOneInput {
        create: PetCreateInput
        connect: PetWhereUniqueInput
      }

      input PetCreateWithoutAccountInput {
        id: UUID
        type: PetType!
        info: Json
        post: PostCreateOneInput!
      }

      type PetEdge {
        node: Pet!
        cursor: String!
      }

      type PetImage {
        id: UUID!
        image: Image!
        pet: Pet!
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type PetImageConnection {
        pageInfo: PageInfo!
        edges: [PetImageEdge]!
        aggregate: AggregatePetImage!
      }

      input PetImageCreateInput {
        id: UUID
        image: ImageCreateOneInput!
        pet: PetCreateOneInput!
        account: AccountCreateOneWithoutPetImagesInput!
      }

      input PetImageCreateManyWithoutAccountInput {
        create: [PetImageCreateWithoutAccountInput!]
        connect: [PetImageWhereUniqueInput!]
      }

      input PetImageCreateWithoutAccountInput {
        id: UUID
        image: ImageCreateOneInput!
        pet: PetCreateOneInput!
      }

      type PetImageEdge {
        node: PetImage!
        cursor: String!
      }

      enum PetImageOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type PetImagePreviousValues {
        id: UUID!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input PetImageScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PetImageScalarWhereInput!]
        OR: [PetImageScalarWhereInput!]
        NOT: [PetImageScalarWhereInput!]
      }

      type PetImageSubscriptionPayload {
        mutation: MutationType!
        node: PetImage
        updatedFields: [String!]
        previousValues: PetImagePreviousValues
      }

      input PetImageSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PetImageWhereInput
        AND: [PetImageSubscriptionWhereInput!]
        OR: [PetImageSubscriptionWhereInput!]
        NOT: [PetImageSubscriptionWhereInput!]
      }

      input PetImageUpdateInput {
        image: ImageUpdateOneRequiredInput
        pet: PetUpdateOneRequiredInput
        account: AccountUpdateOneRequiredWithoutPetImagesInput
      }

      input PetImageUpdateManyWithoutAccountInput {
        create: [PetImageCreateWithoutAccountInput!]
        delete: [PetImageWhereUniqueInput!]
        connect: [PetImageWhereUniqueInput!]
        set: [PetImageWhereUniqueInput!]
        disconnect: [PetImageWhereUniqueInput!]
        update: [PetImageUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [PetImageUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [PetImageScalarWhereInput!]
      }

      input PetImageUpdateWithoutAccountDataInput {
        image: ImageUpdateOneRequiredInput
        pet: PetUpdateOneRequiredInput
      }

      input PetImageUpdateWithWhereUniqueWithoutAccountInput {
        where: PetImageWhereUniqueInput!
        data: PetImageUpdateWithoutAccountDataInput!
      }

      input PetImageUpsertWithWhereUniqueWithoutAccountInput {
        where: PetImageWhereUniqueInput!
        update: PetImageUpdateWithoutAccountDataInput!
        create: PetImageCreateWithoutAccountInput!
      }

      input PetImageWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        image: ImageWhereInput
        pet: PetWhereInput
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PetImageWhereInput!]
        OR: [PetImageWhereInput!]
        NOT: [PetImageWhereInput!]
      }

      input PetImageWhereUniqueInput {
        id: UUID
      }

      enum PetOrderByInput {
        id_ASC
        id_DESC
        type_ASC
        type_DESC
        info_ASC
        info_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type PetPreviousValues {
        id: UUID!
        type: PetType!
        info: Json
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input PetScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        type: PetType
        type_not: PetType
        type_in: [PetType!]
        type_not_in: [PetType!]
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PetScalarWhereInput!]
        OR: [PetScalarWhereInput!]
        NOT: [PetScalarWhereInput!]
      }

      type PetSubscriptionPayload {
        mutation: MutationType!
        node: Pet
        updatedFields: [String!]
        previousValues: PetPreviousValues
      }

      input PetSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PetWhereInput
        AND: [PetSubscriptionWhereInput!]
        OR: [PetSubscriptionWhereInput!]
        NOT: [PetSubscriptionWhereInput!]
      }

      enum PetType {
        Dog
        Cat
        Bird
        Fish
        Snake
        Hare
        Hamster
        Other
      }

      input PetUpdateDataInput {
        type: PetType
        info: Json
        post: PostUpdateOneRequiredInput
        account: AccountUpdateOneRequiredWithoutPetsInput
      }

      input PetUpdateInput {
        type: PetType
        info: Json
        post: PostUpdateOneRequiredInput
        account: AccountUpdateOneRequiredWithoutPetsInput
      }

      input PetUpdateManyDataInput {
        type: PetType
        info: Json
      }

      input PetUpdateManyMutationInput {
        type: PetType
        info: Json
      }

      input PetUpdateManyWithoutAccountInput {
        create: [PetCreateWithoutAccountInput!]
        delete: [PetWhereUniqueInput!]
        connect: [PetWhereUniqueInput!]
        set: [PetWhereUniqueInput!]
        disconnect: [PetWhereUniqueInput!]
        update: [PetUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [PetUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [PetScalarWhereInput!]
        updateMany: [PetUpdateManyWithWhereNestedInput!]
      }

      input PetUpdateManyWithWhereNestedInput {
        where: PetScalarWhereInput!
        data: PetUpdateManyDataInput!
      }

      input PetUpdateOneRequiredInput {
        create: PetCreateInput
        update: PetUpdateDataInput
        upsert: PetUpsertNestedInput
        connect: PetWhereUniqueInput
      }

      input PetUpdateWithoutAccountDataInput {
        type: PetType
        info: Json
        post: PostUpdateOneRequiredInput
      }

      input PetUpdateWithWhereUniqueWithoutAccountInput {
        where: PetWhereUniqueInput!
        data: PetUpdateWithoutAccountDataInput!
      }

      input PetUpsertNestedInput {
        update: PetUpdateDataInput!
        create: PetCreateInput!
      }

      input PetUpsertWithWhereUniqueWithoutAccountInput {
        where: PetWhereUniqueInput!
        update: PetUpdateWithoutAccountDataInput!
        create: PetCreateWithoutAccountInput!
      }

      input PetWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        type: PetType
        type_not: PetType
        type_in: [PetType!]
        type_not_in: [PetType!]
        post: PostWhereInput
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PetWhereInput!]
        OR: [PetWhereInput!]
        NOT: [PetWhereInput!]
      }

      input PetWhereUniqueInput {
        id: UUID
      }

      type Post {
        id: UUID!
        title: String!
        description: String
        location: String!
        price: Int!
        dueDate: DateTime!
        settings: Json
        status: PostStatus!
        postTags(
          where: PostTagWhereInput
          orderBy: PostTagOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [PostTag!]
        comments(
          where: CommentWhereInput
          orderBy: CommentOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Comment!]
        reviews(
          where: ReviewWhereInput
          orderBy: ReviewOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Review!]
        reports(
          where: ReportWhereInput
          orderBy: ReportOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Report!]
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type PostConnection {
        pageInfo: PageInfo!
        edges: [PostEdge]!
        aggregate: AggregatePost!
      }

      input PostCreateInput {
        id: UUID
        title: String!
        description: String
        location: String!
        price: Int
        dueDate: DateTime!
        settings: Json
        status: PostStatus
        postTags: PostTagCreateManyWithoutPostInput
        comments: CommentCreateManyWithoutPostInput
        reviews: ReviewCreateManyWithoutPostInput
        reports: ReportCreateManyWithoutPostInput
        account: AccountCreateOneWithoutPostsInput!
      }

      input PostCreateManyWithoutAccountInput {
        create: [PostCreateWithoutAccountInput!]
        connect: [PostWhereUniqueInput!]
      }

      input PostCreateOneInput {
        create: PostCreateInput
        connect: PostWhereUniqueInput
      }

      input PostCreateOneWithoutCommentsInput {
        create: PostCreateWithoutCommentsInput
        connect: PostWhereUniqueInput
      }

      input PostCreateOneWithoutPostTagsInput {
        create: PostCreateWithoutPostTagsInput
        connect: PostWhereUniqueInput
      }

      input PostCreateOneWithoutReportsInput {
        create: PostCreateWithoutReportsInput
        connect: PostWhereUniqueInput
      }

      input PostCreateOneWithoutReviewsInput {
        create: PostCreateWithoutReviewsInput
        connect: PostWhereUniqueInput
      }

      input PostCreateWithoutAccountInput {
        id: UUID
        title: String!
        description: String
        location: String!
        price: Int
        dueDate: DateTime!
        settings: Json
        status: PostStatus
        postTags: PostTagCreateManyWithoutPostInput
        comments: CommentCreateManyWithoutPostInput
        reviews: ReviewCreateManyWithoutPostInput
        reports: ReportCreateManyWithoutPostInput
      }

      input PostCreateWithoutCommentsInput {
        id: UUID
        title: String!
        description: String
        location: String!
        price: Int
        dueDate: DateTime!
        settings: Json
        status: PostStatus
        postTags: PostTagCreateManyWithoutPostInput
        reviews: ReviewCreateManyWithoutPostInput
        reports: ReportCreateManyWithoutPostInput
        account: AccountCreateOneWithoutPostsInput!
      }

      input PostCreateWithoutPostTagsInput {
        id: UUID
        title: String!
        description: String
        location: String!
        price: Int
        dueDate: DateTime!
        settings: Json
        status: PostStatus
        comments: CommentCreateManyWithoutPostInput
        reviews: ReviewCreateManyWithoutPostInput
        reports: ReportCreateManyWithoutPostInput
        account: AccountCreateOneWithoutPostsInput!
      }

      input PostCreateWithoutReportsInput {
        id: UUID
        title: String!
        description: String
        location: String!
        price: Int
        dueDate: DateTime!
        settings: Json
        status: PostStatus
        postTags: PostTagCreateManyWithoutPostInput
        comments: CommentCreateManyWithoutPostInput
        reviews: ReviewCreateManyWithoutPostInput
        account: AccountCreateOneWithoutPostsInput!
      }

      input PostCreateWithoutReviewsInput {
        id: UUID
        title: String!
        description: String
        location: String!
        price: Int
        dueDate: DateTime!
        settings: Json
        status: PostStatus
        postTags: PostTagCreateManyWithoutPostInput
        comments: CommentCreateManyWithoutPostInput
        reports: ReportCreateManyWithoutPostInput
        account: AccountCreateOneWithoutPostsInput!
      }

      type PostEdge {
        node: Post!
        cursor: String!
      }

      type PostLike {
        id: UUID!
        post: Post!
        like: Like!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type PostLikeConnection {
        pageInfo: PageInfo!
        edges: [PostLikeEdge]!
        aggregate: AggregatePostLike!
      }

      input PostLikeCreateInput {
        id: UUID
        post: PostCreateOneInput!
        like: LikeCreateOneInput!
      }

      type PostLikeEdge {
        node: PostLike!
        cursor: String!
      }

      enum PostLikeOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type PostLikePreviousValues {
        id: UUID!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type PostLikeSubscriptionPayload {
        mutation: MutationType!
        node: PostLike
        updatedFields: [String!]
        previousValues: PostLikePreviousValues
      }

      input PostLikeSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PostLikeWhereInput
        AND: [PostLikeSubscriptionWhereInput!]
        OR: [PostLikeSubscriptionWhereInput!]
        NOT: [PostLikeSubscriptionWhereInput!]
      }

      input PostLikeUpdateInput {
        post: PostUpdateOneRequiredInput
        like: LikeUpdateOneRequiredInput
      }

      input PostLikeWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        post: PostWhereInput
        like: LikeWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PostLikeWhereInput!]
        OR: [PostLikeWhereInput!]
        NOT: [PostLikeWhereInput!]
      }

      input PostLikeWhereUniqueInput {
        id: UUID
      }

      enum PostOrderByInput {
        id_ASC
        id_DESC
        title_ASC
        title_DESC
        description_ASC
        description_DESC
        location_ASC
        location_DESC
        price_ASC
        price_DESC
        dueDate_ASC
        dueDate_DESC
        settings_ASC
        settings_DESC
        status_ASC
        status_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type PostPreviousValues {
        id: UUID!
        title: String!
        description: String
        location: String!
        price: Int!
        dueDate: DateTime!
        settings: Json
        status: PostStatus!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input PostScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        location: String
        location_not: String
        location_in: [String!]
        location_not_in: [String!]
        location_lt: String
        location_lte: String
        location_gt: String
        location_gte: String
        location_contains: String
        location_not_contains: String
        location_starts_with: String
        location_not_starts_with: String
        location_ends_with: String
        location_not_ends_with: String
        price: Int
        price_not: Int
        price_in: [Int!]
        price_not_in: [Int!]
        price_lt: Int
        price_lte: Int
        price_gt: Int
        price_gte: Int
        dueDate: DateTime
        dueDate_not: DateTime
        dueDate_in: [DateTime!]
        dueDate_not_in: [DateTime!]
        dueDate_lt: DateTime
        dueDate_lte: DateTime
        dueDate_gt: DateTime
        dueDate_gte: DateTime
        status: PostStatus
        status_not: PostStatus
        status_in: [PostStatus!]
        status_not_in: [PostStatus!]
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PostScalarWhereInput!]
        OR: [PostScalarWhereInput!]
        NOT: [PostScalarWhereInput!]
      }

      enum PostStatus {
        Pending
        New
        Done
        Expired
      }

      type PostSubscriptionPayload {
        mutation: MutationType!
        node: Post
        updatedFields: [String!]
        previousValues: PostPreviousValues
      }

      input PostSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PostWhereInput
        AND: [PostSubscriptionWhereInput!]
        OR: [PostSubscriptionWhereInput!]
        NOT: [PostSubscriptionWhereInput!]
      }

      type PostTag {
        id: UUID!
        post: Post!
        tag: Tag!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type PostTagConnection {
        pageInfo: PageInfo!
        edges: [PostTagEdge]!
        aggregate: AggregatePostTag!
      }

      input PostTagCreateInput {
        id: UUID
        post: PostCreateOneWithoutPostTagsInput!
        tag: TagCreateOneWithoutPostTagsInput!
      }

      input PostTagCreateManyWithoutPostInput {
        create: [PostTagCreateWithoutPostInput!]
        connect: [PostTagWhereUniqueInput!]
      }

      input PostTagCreateManyWithoutTagInput {
        create: [PostTagCreateWithoutTagInput!]
        connect: [PostTagWhereUniqueInput!]
      }

      input PostTagCreateWithoutPostInput {
        id: UUID
        tag: TagCreateOneWithoutPostTagsInput!
      }

      input PostTagCreateWithoutTagInput {
        id: UUID
        post: PostCreateOneWithoutPostTagsInput!
      }

      type PostTagEdge {
        node: PostTag!
        cursor: String!
      }

      enum PostTagOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type PostTagPreviousValues {
        id: UUID!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input PostTagScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PostTagScalarWhereInput!]
        OR: [PostTagScalarWhereInput!]
        NOT: [PostTagScalarWhereInput!]
      }

      type PostTagSubscriptionPayload {
        mutation: MutationType!
        node: PostTag
        updatedFields: [String!]
        previousValues: PostTagPreviousValues
      }

      input PostTagSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PostTagWhereInput
        AND: [PostTagSubscriptionWhereInput!]
        OR: [PostTagSubscriptionWhereInput!]
        NOT: [PostTagSubscriptionWhereInput!]
      }

      input PostTagUpdateInput {
        post: PostUpdateOneRequiredWithoutPostTagsInput
        tag: TagUpdateOneRequiredWithoutPostTagsInput
      }

      input PostTagUpdateManyWithoutPostInput {
        create: [PostTagCreateWithoutPostInput!]
        delete: [PostTagWhereUniqueInput!]
        connect: [PostTagWhereUniqueInput!]
        set: [PostTagWhereUniqueInput!]
        disconnect: [PostTagWhereUniqueInput!]
        update: [PostTagUpdateWithWhereUniqueWithoutPostInput!]
        upsert: [PostTagUpsertWithWhereUniqueWithoutPostInput!]
        deleteMany: [PostTagScalarWhereInput!]
      }

      input PostTagUpdateManyWithoutTagInput {
        create: [PostTagCreateWithoutTagInput!]
        delete: [PostTagWhereUniqueInput!]
        connect: [PostTagWhereUniqueInput!]
        set: [PostTagWhereUniqueInput!]
        disconnect: [PostTagWhereUniqueInput!]
        update: [PostTagUpdateWithWhereUniqueWithoutTagInput!]
        upsert: [PostTagUpsertWithWhereUniqueWithoutTagInput!]
        deleteMany: [PostTagScalarWhereInput!]
      }

      input PostTagUpdateWithoutPostDataInput {
        tag: TagUpdateOneRequiredWithoutPostTagsInput
      }

      input PostTagUpdateWithoutTagDataInput {
        post: PostUpdateOneRequiredWithoutPostTagsInput
      }

      input PostTagUpdateWithWhereUniqueWithoutPostInput {
        where: PostTagWhereUniqueInput!
        data: PostTagUpdateWithoutPostDataInput!
      }

      input PostTagUpdateWithWhereUniqueWithoutTagInput {
        where: PostTagWhereUniqueInput!
        data: PostTagUpdateWithoutTagDataInput!
      }

      input PostTagUpsertWithWhereUniqueWithoutPostInput {
        where: PostTagWhereUniqueInput!
        update: PostTagUpdateWithoutPostDataInput!
        create: PostTagCreateWithoutPostInput!
      }

      input PostTagUpsertWithWhereUniqueWithoutTagInput {
        where: PostTagWhereUniqueInput!
        update: PostTagUpdateWithoutTagDataInput!
        create: PostTagCreateWithoutTagInput!
      }

      input PostTagWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        post: PostWhereInput
        tag: TagWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PostTagWhereInput!]
        OR: [PostTagWhereInput!]
        NOT: [PostTagWhereInput!]
      }

      input PostTagWhereUniqueInput {
        id: UUID
      }

      input PostUpdateDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        postTags: PostTagUpdateManyWithoutPostInput
        comments: CommentUpdateManyWithoutPostInput
        reviews: ReviewUpdateManyWithoutPostInput
        reports: ReportUpdateManyWithoutPostInput
        account: AccountUpdateOneRequiredWithoutPostsInput
      }

      input PostUpdateInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        postTags: PostTagUpdateManyWithoutPostInput
        comments: CommentUpdateManyWithoutPostInput
        reviews: ReviewUpdateManyWithoutPostInput
        reports: ReportUpdateManyWithoutPostInput
        account: AccountUpdateOneRequiredWithoutPostsInput
      }

      input PostUpdateManyDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
      }

      input PostUpdateManyMutationInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
      }

      input PostUpdateManyWithoutAccountInput {
        create: [PostCreateWithoutAccountInput!]
        delete: [PostWhereUniqueInput!]
        connect: [PostWhereUniqueInput!]
        set: [PostWhereUniqueInput!]
        disconnect: [PostWhereUniqueInput!]
        update: [PostUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [PostUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [PostScalarWhereInput!]
        updateMany: [PostUpdateManyWithWhereNestedInput!]
      }

      input PostUpdateManyWithWhereNestedInput {
        where: PostScalarWhereInput!
        data: PostUpdateManyDataInput!
      }

      input PostUpdateOneRequiredInput {
        create: PostCreateInput
        update: PostUpdateDataInput
        upsert: PostUpsertNestedInput
        connect: PostWhereUniqueInput
      }

      input PostUpdateOneRequiredWithoutCommentsInput {
        create: PostCreateWithoutCommentsInput
        update: PostUpdateWithoutCommentsDataInput
        upsert: PostUpsertWithoutCommentsInput
        connect: PostWhereUniqueInput
      }

      input PostUpdateOneRequiredWithoutPostTagsInput {
        create: PostCreateWithoutPostTagsInput
        update: PostUpdateWithoutPostTagsDataInput
        upsert: PostUpsertWithoutPostTagsInput
        connect: PostWhereUniqueInput
      }

      input PostUpdateOneRequiredWithoutReportsInput {
        create: PostCreateWithoutReportsInput
        update: PostUpdateWithoutReportsDataInput
        upsert: PostUpsertWithoutReportsInput
        connect: PostWhereUniqueInput
      }

      input PostUpdateOneRequiredWithoutReviewsInput {
        create: PostCreateWithoutReviewsInput
        update: PostUpdateWithoutReviewsDataInput
        upsert: PostUpsertWithoutReviewsInput
        connect: PostWhereUniqueInput
      }

      input PostUpdateWithoutAccountDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        postTags: PostTagUpdateManyWithoutPostInput
        comments: CommentUpdateManyWithoutPostInput
        reviews: ReviewUpdateManyWithoutPostInput
        reports: ReportUpdateManyWithoutPostInput
      }

      input PostUpdateWithoutCommentsDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        postTags: PostTagUpdateManyWithoutPostInput
        reviews: ReviewUpdateManyWithoutPostInput
        reports: ReportUpdateManyWithoutPostInput
        account: AccountUpdateOneRequiredWithoutPostsInput
      }

      input PostUpdateWithoutPostTagsDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        comments: CommentUpdateManyWithoutPostInput
        reviews: ReviewUpdateManyWithoutPostInput
        reports: ReportUpdateManyWithoutPostInput
        account: AccountUpdateOneRequiredWithoutPostsInput
      }

      input PostUpdateWithoutReportsDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        postTags: PostTagUpdateManyWithoutPostInput
        comments: CommentUpdateManyWithoutPostInput
        reviews: ReviewUpdateManyWithoutPostInput
        account: AccountUpdateOneRequiredWithoutPostsInput
      }

      input PostUpdateWithoutReviewsDataInput {
        title: String
        description: String
        location: String
        price: Int
        dueDate: DateTime
        settings: Json
        status: PostStatus
        postTags: PostTagUpdateManyWithoutPostInput
        comments: CommentUpdateManyWithoutPostInput
        reports: ReportUpdateManyWithoutPostInput
        account: AccountUpdateOneRequiredWithoutPostsInput
      }

      input PostUpdateWithWhereUniqueWithoutAccountInput {
        where: PostWhereUniqueInput!
        data: PostUpdateWithoutAccountDataInput!
      }

      input PostUpsertNestedInput {
        update: PostUpdateDataInput!
        create: PostCreateInput!
      }

      input PostUpsertWithoutCommentsInput {
        update: PostUpdateWithoutCommentsDataInput!
        create: PostCreateWithoutCommentsInput!
      }

      input PostUpsertWithoutPostTagsInput {
        update: PostUpdateWithoutPostTagsDataInput!
        create: PostCreateWithoutPostTagsInput!
      }

      input PostUpsertWithoutReportsInput {
        update: PostUpdateWithoutReportsDataInput!
        create: PostCreateWithoutReportsInput!
      }

      input PostUpsertWithoutReviewsInput {
        update: PostUpdateWithoutReviewsDataInput!
        create: PostCreateWithoutReviewsInput!
      }

      input PostUpsertWithWhereUniqueWithoutAccountInput {
        where: PostWhereUniqueInput!
        update: PostUpdateWithoutAccountDataInput!
        create: PostCreateWithoutAccountInput!
      }

      input PostWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        location: String
        location_not: String
        location_in: [String!]
        location_not_in: [String!]
        location_lt: String
        location_lte: String
        location_gt: String
        location_gte: String
        location_contains: String
        location_not_contains: String
        location_starts_with: String
        location_not_starts_with: String
        location_ends_with: String
        location_not_ends_with: String
        price: Int
        price_not: Int
        price_in: [Int!]
        price_not_in: [Int!]
        price_lt: Int
        price_lte: Int
        price_gt: Int
        price_gte: Int
        dueDate: DateTime
        dueDate_not: DateTime
        dueDate_in: [DateTime!]
        dueDate_not_in: [DateTime!]
        dueDate_lt: DateTime
        dueDate_lte: DateTime
        dueDate_gt: DateTime
        dueDate_gte: DateTime
        status: PostStatus
        status_not: PostStatus
        status_in: [PostStatus!]
        status_not_in: [PostStatus!]
        postTags_every: PostTagWhereInput
        postTags_some: PostTagWhereInput
        postTags_none: PostTagWhereInput
        comments_every: CommentWhereInput
        comments_some: CommentWhereInput
        comments_none: CommentWhereInput
        reviews_every: ReviewWhereInput
        reviews_some: ReviewWhereInput
        reviews_none: ReviewWhereInput
        reports_every: ReportWhereInput
        reports_some: ReportWhereInput
        reports_none: ReportWhereInput
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [PostWhereInput!]
        OR: [PostWhereInput!]
        NOT: [PostWhereInput!]
      }

      input PostWhereUniqueInput {
        id: UUID
      }

      type Query {
        account(where: AccountWhereUniqueInput!): Account
        accounts(
          where: AccountWhereInput
          orderBy: AccountOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Account]!
        accountsConnection(
          where: AccountWhereInput
          orderBy: AccountOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): AccountConnection!
        comment(where: CommentWhereUniqueInput!): Comment
        comments(
          where: CommentWhereInput
          orderBy: CommentOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Comment]!
        commentsConnection(
          where: CommentWhereInput
          orderBy: CommentOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): CommentConnection!
        commentLike(where: CommentLikeWhereUniqueInput!): CommentLike
        commentLikes(
          where: CommentLikeWhereInput
          orderBy: CommentLikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [CommentLike]!
        commentLikesConnection(
          where: CommentLikeWhereInput
          orderBy: CommentLikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): CommentLikeConnection!
        image(where: ImageWhereUniqueInput!): Image
        images(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Image]!
        imagesConnection(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ImageConnection!
        like(where: LikeWhereUniqueInput!): Like
        likes(
          where: LikeWhereInput
          orderBy: LikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Like]!
        likesConnection(
          where: LikeWhereInput
          orderBy: LikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): LikeConnection!
        pet(where: PetWhereUniqueInput!): Pet
        pets(
          where: PetWhereInput
          orderBy: PetOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Pet]!
        petsConnection(
          where: PetWhereInput
          orderBy: PetOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): PetConnection!
        petImage(where: PetImageWhereUniqueInput!): PetImage
        petImages(
          where: PetImageWhereInput
          orderBy: PetImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [PetImage]!
        petImagesConnection(
          where: PetImageWhereInput
          orderBy: PetImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): PetImageConnection!
        post(where: PostWhereUniqueInput!): Post
        posts(
          where: PostWhereInput
          orderBy: PostOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Post]!
        postsConnection(
          where: PostWhereInput
          orderBy: PostOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): PostConnection!
        postLike(where: PostLikeWhereUniqueInput!): PostLike
        postLikes(
          where: PostLikeWhereInput
          orderBy: PostLikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [PostLike]!
        postLikesConnection(
          where: PostLikeWhereInput
          orderBy: PostLikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): PostLikeConnection!
        postTag(where: PostTagWhereUniqueInput!): PostTag
        postTags(
          where: PostTagWhereInput
          orderBy: PostTagOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [PostTag]!
        postTagsConnection(
          where: PostTagWhereInput
          orderBy: PostTagOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): PostTagConnection!
        report(where: ReportWhereUniqueInput!): Report
        reports(
          where: ReportWhereInput
          orderBy: ReportOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Report]!
        reportsConnection(
          where: ReportWhereInput
          orderBy: ReportOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ReportConnection!
        review(where: ReviewWhereUniqueInput!): Review
        reviews(
          where: ReviewWhereInput
          orderBy: ReviewOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Review]!
        reviewsConnection(
          where: ReviewWhereInput
          orderBy: ReviewOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ReviewConnection!
        reviewLike(where: ReviewLikeWhereUniqueInput!): ReviewLike
        reviewLikes(
          where: ReviewLikeWhereInput
          orderBy: ReviewLikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [ReviewLike]!
        reviewLikesConnection(
          where: ReviewLikeWhereInput
          orderBy: ReviewLikeOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ReviewLikeConnection!
        tag(where: TagWhereUniqueInput!): Tag
        tags(
          where: TagWhereInput
          orderBy: TagOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Tag]!
        tagsConnection(
          where: TagWhereInput
          orderBy: TagOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): TagConnection!
        user(where: UserWhereUniqueInput!): User
        users(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [User]!
        usersConnection(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): UserConnection!
        node(id: ID!): Node
      }

      type Report {
        id: UUID!
        reason: String!
        post: Post!
        createdBy: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type ReportConnection {
        pageInfo: PageInfo!
        edges: [ReportEdge]!
        aggregate: AggregateReport!
      }

      input ReportCreateInput {
        id: UUID
        reason: String!
        post: PostCreateOneWithoutReportsInput!
        createdBy: AccountCreateOneWithoutReportsInput!
      }

      input ReportCreateManyWithoutCreatedByInput {
        create: [ReportCreateWithoutCreatedByInput!]
        connect: [ReportWhereUniqueInput!]
      }

      input ReportCreateManyWithoutPostInput {
        create: [ReportCreateWithoutPostInput!]
        connect: [ReportWhereUniqueInput!]
      }

      input ReportCreateWithoutCreatedByInput {
        id: UUID
        reason: String!
        post: PostCreateOneWithoutReportsInput!
      }

      input ReportCreateWithoutPostInput {
        id: UUID
        reason: String!
        createdBy: AccountCreateOneWithoutReportsInput!
      }

      type ReportEdge {
        node: Report!
        cursor: String!
      }

      enum ReportOrderByInput {
        id_ASC
        id_DESC
        reason_ASC
        reason_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type ReportPreviousValues {
        id: UUID!
        reason: String!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input ReportScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        reason: String
        reason_not: String
        reason_in: [String!]
        reason_not_in: [String!]
        reason_lt: String
        reason_lte: String
        reason_gt: String
        reason_gte: String
        reason_contains: String
        reason_not_contains: String
        reason_starts_with: String
        reason_not_starts_with: String
        reason_ends_with: String
        reason_not_ends_with: String
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ReportScalarWhereInput!]
        OR: [ReportScalarWhereInput!]
        NOT: [ReportScalarWhereInput!]
      }

      type ReportSubscriptionPayload {
        mutation: MutationType!
        node: Report
        updatedFields: [String!]
        previousValues: ReportPreviousValues
      }

      input ReportSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ReportWhereInput
        AND: [ReportSubscriptionWhereInput!]
        OR: [ReportSubscriptionWhereInput!]
        NOT: [ReportSubscriptionWhereInput!]
      }

      input ReportUpdateInput {
        reason: String
        post: PostUpdateOneRequiredWithoutReportsInput
        createdBy: AccountUpdateOneRequiredWithoutReportsInput
      }

      input ReportUpdateManyDataInput {
        reason: String
      }

      input ReportUpdateManyMutationInput {
        reason: String
      }

      input ReportUpdateManyWithoutCreatedByInput {
        create: [ReportCreateWithoutCreatedByInput!]
        delete: [ReportWhereUniqueInput!]
        connect: [ReportWhereUniqueInput!]
        set: [ReportWhereUniqueInput!]
        disconnect: [ReportWhereUniqueInput!]
        update: [ReportUpdateWithWhereUniqueWithoutCreatedByInput!]
        upsert: [ReportUpsertWithWhereUniqueWithoutCreatedByInput!]
        deleteMany: [ReportScalarWhereInput!]
        updateMany: [ReportUpdateManyWithWhereNestedInput!]
      }

      input ReportUpdateManyWithoutPostInput {
        create: [ReportCreateWithoutPostInput!]
        delete: [ReportWhereUniqueInput!]
        connect: [ReportWhereUniqueInput!]
        set: [ReportWhereUniqueInput!]
        disconnect: [ReportWhereUniqueInput!]
        update: [ReportUpdateWithWhereUniqueWithoutPostInput!]
        upsert: [ReportUpsertWithWhereUniqueWithoutPostInput!]
        deleteMany: [ReportScalarWhereInput!]
        updateMany: [ReportUpdateManyWithWhereNestedInput!]
      }

      input ReportUpdateManyWithWhereNestedInput {
        where: ReportScalarWhereInput!
        data: ReportUpdateManyDataInput!
      }

      input ReportUpdateWithoutCreatedByDataInput {
        reason: String
        post: PostUpdateOneRequiredWithoutReportsInput
      }

      input ReportUpdateWithoutPostDataInput {
        reason: String
        createdBy: AccountUpdateOneRequiredWithoutReportsInput
      }

      input ReportUpdateWithWhereUniqueWithoutCreatedByInput {
        where: ReportWhereUniqueInput!
        data: ReportUpdateWithoutCreatedByDataInput!
      }

      input ReportUpdateWithWhereUniqueWithoutPostInput {
        where: ReportWhereUniqueInput!
        data: ReportUpdateWithoutPostDataInput!
      }

      input ReportUpsertWithWhereUniqueWithoutCreatedByInput {
        where: ReportWhereUniqueInput!
        update: ReportUpdateWithoutCreatedByDataInput!
        create: ReportCreateWithoutCreatedByInput!
      }

      input ReportUpsertWithWhereUniqueWithoutPostInput {
        where: ReportWhereUniqueInput!
        update: ReportUpdateWithoutPostDataInput!
        create: ReportCreateWithoutPostInput!
      }

      input ReportWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        reason: String
        reason_not: String
        reason_in: [String!]
        reason_not_in: [String!]
        reason_lt: String
        reason_lte: String
        reason_gt: String
        reason_gte: String
        reason_contains: String
        reason_not_contains: String
        reason_starts_with: String
        reason_not_starts_with: String
        reason_ends_with: String
        reason_not_ends_with: String
        post: PostWhereInput
        createdBy: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ReportWhereInput!]
        OR: [ReportWhereInput!]
        NOT: [ReportWhereInput!]
      }

      input ReportWhereUniqueInput {
        id: UUID
      }

      type Review {
        id: UUID!
        message: String!
        stars: Int!
        image: Image
        likes: Int!
        post: Post!
        createdBy: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type ReviewConnection {
        pageInfo: PageInfo!
        edges: [ReviewEdge]!
        aggregate: AggregateReview!
      }

      input ReviewCreateInput {
        id: UUID
        message: String!
        stars: Int!
        image: ImageCreateOneInput
        likes: Int
        post: PostCreateOneWithoutReviewsInput!
        createdBy: AccountCreateOneWithoutReviewsInput!
      }

      input ReviewCreateManyWithoutCreatedByInput {
        create: [ReviewCreateWithoutCreatedByInput!]
        connect: [ReviewWhereUniqueInput!]
      }

      input ReviewCreateManyWithoutPostInput {
        create: [ReviewCreateWithoutPostInput!]
        connect: [ReviewWhereUniqueInput!]
      }

      input ReviewCreateOneInput {
        create: ReviewCreateInput
        connect: ReviewWhereUniqueInput
      }

      input ReviewCreateWithoutCreatedByInput {
        id: UUID
        message: String!
        stars: Int!
        image: ImageCreateOneInput
        likes: Int
        post: PostCreateOneWithoutReviewsInput!
      }

      input ReviewCreateWithoutPostInput {
        id: UUID
        message: String!
        stars: Int!
        image: ImageCreateOneInput
        likes: Int
        createdBy: AccountCreateOneWithoutReviewsInput!
      }

      type ReviewEdge {
        node: Review!
        cursor: String!
      }

      type ReviewLike {
        id: UUID!
        review: Review!
        like: Like!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type ReviewLikeConnection {
        pageInfo: PageInfo!
        edges: [ReviewLikeEdge]!
        aggregate: AggregateReviewLike!
      }

      input ReviewLikeCreateInput {
        id: UUID
        review: ReviewCreateOneInput!
        like: LikeCreateOneInput!
      }

      type ReviewLikeEdge {
        node: ReviewLike!
        cursor: String!
      }

      enum ReviewLikeOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type ReviewLikePreviousValues {
        id: UUID!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type ReviewLikeSubscriptionPayload {
        mutation: MutationType!
        node: ReviewLike
        updatedFields: [String!]
        previousValues: ReviewLikePreviousValues
      }

      input ReviewLikeSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ReviewLikeWhereInput
        AND: [ReviewLikeSubscriptionWhereInput!]
        OR: [ReviewLikeSubscriptionWhereInput!]
        NOT: [ReviewLikeSubscriptionWhereInput!]
      }

      input ReviewLikeUpdateInput {
        review: ReviewUpdateOneRequiredInput
        like: LikeUpdateOneRequiredInput
      }

      input ReviewLikeWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        review: ReviewWhereInput
        like: LikeWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ReviewLikeWhereInput!]
        OR: [ReviewLikeWhereInput!]
        NOT: [ReviewLikeWhereInput!]
      }

      input ReviewLikeWhereUniqueInput {
        id: UUID
      }

      enum ReviewOrderByInput {
        id_ASC
        id_DESC
        message_ASC
        message_DESC
        stars_ASC
        stars_DESC
        likes_ASC
        likes_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type ReviewPreviousValues {
        id: UUID!
        message: String!
        stars: Int!
        likes: Int!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input ReviewScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        message: String
        message_not: String
        message_in: [String!]
        message_not_in: [String!]
        message_lt: String
        message_lte: String
        message_gt: String
        message_gte: String
        message_contains: String
        message_not_contains: String
        message_starts_with: String
        message_not_starts_with: String
        message_ends_with: String
        message_not_ends_with: String
        stars: Int
        stars_not: Int
        stars_in: [Int!]
        stars_not_in: [Int!]
        stars_lt: Int
        stars_lte: Int
        stars_gt: Int
        stars_gte: Int
        likes: Int
        likes_not: Int
        likes_in: [Int!]
        likes_not_in: [Int!]
        likes_lt: Int
        likes_lte: Int
        likes_gt: Int
        likes_gte: Int
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ReviewScalarWhereInput!]
        OR: [ReviewScalarWhereInput!]
        NOT: [ReviewScalarWhereInput!]
      }

      type ReviewSubscriptionPayload {
        mutation: MutationType!
        node: Review
        updatedFields: [String!]
        previousValues: ReviewPreviousValues
      }

      input ReviewSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ReviewWhereInput
        AND: [ReviewSubscriptionWhereInput!]
        OR: [ReviewSubscriptionWhereInput!]
        NOT: [ReviewSubscriptionWhereInput!]
      }

      input ReviewUpdateDataInput {
        message: String
        stars: Int
        image: ImageUpdateOneInput
        likes: Int
        post: PostUpdateOneRequiredWithoutReviewsInput
        createdBy: AccountUpdateOneRequiredWithoutReviewsInput
      }

      input ReviewUpdateInput {
        message: String
        stars: Int
        image: ImageUpdateOneInput
        likes: Int
        post: PostUpdateOneRequiredWithoutReviewsInput
        createdBy: AccountUpdateOneRequiredWithoutReviewsInput
      }

      input ReviewUpdateManyDataInput {
        message: String
        stars: Int
        likes: Int
      }

      input ReviewUpdateManyMutationInput {
        message: String
        stars: Int
        likes: Int
      }

      input ReviewUpdateManyWithoutCreatedByInput {
        create: [ReviewCreateWithoutCreatedByInput!]
        delete: [ReviewWhereUniqueInput!]
        connect: [ReviewWhereUniqueInput!]
        set: [ReviewWhereUniqueInput!]
        disconnect: [ReviewWhereUniqueInput!]
        update: [ReviewUpdateWithWhereUniqueWithoutCreatedByInput!]
        upsert: [ReviewUpsertWithWhereUniqueWithoutCreatedByInput!]
        deleteMany: [ReviewScalarWhereInput!]
        updateMany: [ReviewUpdateManyWithWhereNestedInput!]
      }

      input ReviewUpdateManyWithoutPostInput {
        create: [ReviewCreateWithoutPostInput!]
        delete: [ReviewWhereUniqueInput!]
        connect: [ReviewWhereUniqueInput!]
        set: [ReviewWhereUniqueInput!]
        disconnect: [ReviewWhereUniqueInput!]
        update: [ReviewUpdateWithWhereUniqueWithoutPostInput!]
        upsert: [ReviewUpsertWithWhereUniqueWithoutPostInput!]
        deleteMany: [ReviewScalarWhereInput!]
        updateMany: [ReviewUpdateManyWithWhereNestedInput!]
      }

      input ReviewUpdateManyWithWhereNestedInput {
        where: ReviewScalarWhereInput!
        data: ReviewUpdateManyDataInput!
      }

      input ReviewUpdateOneRequiredInput {
        create: ReviewCreateInput
        update: ReviewUpdateDataInput
        upsert: ReviewUpsertNestedInput
        connect: ReviewWhereUniqueInput
      }

      input ReviewUpdateWithoutCreatedByDataInput {
        message: String
        stars: Int
        image: ImageUpdateOneInput
        likes: Int
        post: PostUpdateOneRequiredWithoutReviewsInput
      }

      input ReviewUpdateWithoutPostDataInput {
        message: String
        stars: Int
        image: ImageUpdateOneInput
        likes: Int
        createdBy: AccountUpdateOneRequiredWithoutReviewsInput
      }

      input ReviewUpdateWithWhereUniqueWithoutCreatedByInput {
        where: ReviewWhereUniqueInput!
        data: ReviewUpdateWithoutCreatedByDataInput!
      }

      input ReviewUpdateWithWhereUniqueWithoutPostInput {
        where: ReviewWhereUniqueInput!
        data: ReviewUpdateWithoutPostDataInput!
      }

      input ReviewUpsertNestedInput {
        update: ReviewUpdateDataInput!
        create: ReviewCreateInput!
      }

      input ReviewUpsertWithWhereUniqueWithoutCreatedByInput {
        where: ReviewWhereUniqueInput!
        update: ReviewUpdateWithoutCreatedByDataInput!
        create: ReviewCreateWithoutCreatedByInput!
      }

      input ReviewUpsertWithWhereUniqueWithoutPostInput {
        where: ReviewWhereUniqueInput!
        update: ReviewUpdateWithoutPostDataInput!
        create: ReviewCreateWithoutPostInput!
      }

      input ReviewWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        message: String
        message_not: String
        message_in: [String!]
        message_not_in: [String!]
        message_lt: String
        message_lte: String
        message_gt: String
        message_gte: String
        message_contains: String
        message_not_contains: String
        message_starts_with: String
        message_not_starts_with: String
        message_ends_with: String
        message_not_ends_with: String
        stars: Int
        stars_not: Int
        stars_in: [Int!]
        stars_not_in: [Int!]
        stars_lt: Int
        stars_lte: Int
        stars_gt: Int
        stars_gte: Int
        image: ImageWhereInput
        likes: Int
        likes_not: Int
        likes_in: [Int!]
        likes_not_in: [Int!]
        likes_lt: Int
        likes_lte: Int
        likes_gt: Int
        likes_gte: Int
        post: PostWhereInput
        createdBy: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ReviewWhereInput!]
        OR: [ReviewWhereInput!]
        NOT: [ReviewWhereInput!]
      }

      input ReviewWhereUniqueInput {
        id: UUID
      }

      enum Role {
        Free
        Premium
      }

      type Subscription {
        account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
        comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
        commentLike(where: CommentLikeSubscriptionWhereInput): CommentLikeSubscriptionPayload
        image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
        like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
        pet(where: PetSubscriptionWhereInput): PetSubscriptionPayload
        petImage(where: PetImageSubscriptionWhereInput): PetImageSubscriptionPayload
        post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
        postLike(where: PostLikeSubscriptionWhereInput): PostLikeSubscriptionPayload
        postTag(where: PostTagSubscriptionWhereInput): PostTagSubscriptionPayload
        report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
        review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
        reviewLike(where: ReviewLikeSubscriptionWhereInput): ReviewLikeSubscriptionPayload
        tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
        user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
      }

      type Tag {
        id: UUID!
        title: String!
        description: String
        postTags(
          where: PostTagWhereInput
          orderBy: PostTagOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [PostTag!]
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type TagConnection {
        pageInfo: PageInfo!
        edges: [TagEdge]!
        aggregate: AggregateTag!
      }

      input TagCreateInput {
        id: UUID
        title: String!
        description: String
        postTags: PostTagCreateManyWithoutTagInput
      }

      input TagCreateOneWithoutPostTagsInput {
        create: TagCreateWithoutPostTagsInput
        connect: TagWhereUniqueInput
      }

      input TagCreateWithoutPostTagsInput {
        id: UUID
        title: String!
        description: String
      }

      type TagEdge {
        node: Tag!
        cursor: String!
      }

      enum TagOrderByInput {
        id_ASC
        id_DESC
        title_ASC
        title_DESC
        description_ASC
        description_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type TagPreviousValues {
        id: UUID!
        title: String!
        description: String
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type TagSubscriptionPayload {
        mutation: MutationType!
        node: Tag
        updatedFields: [String!]
        previousValues: TagPreviousValues
      }

      input TagSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: TagWhereInput
        AND: [TagSubscriptionWhereInput!]
        OR: [TagSubscriptionWhereInput!]
        NOT: [TagSubscriptionWhereInput!]
      }

      input TagUpdateInput {
        title: String
        description: String
        postTags: PostTagUpdateManyWithoutTagInput
      }

      input TagUpdateManyMutationInput {
        title: String
        description: String
      }

      input TagUpdateOneRequiredWithoutPostTagsInput {
        create: TagCreateWithoutPostTagsInput
        update: TagUpdateWithoutPostTagsDataInput
        upsert: TagUpsertWithoutPostTagsInput
        connect: TagWhereUniqueInput
      }

      input TagUpdateWithoutPostTagsDataInput {
        title: String
        description: String
      }

      input TagUpsertWithoutPostTagsInput {
        update: TagUpdateWithoutPostTagsDataInput!
        create: TagCreateWithoutPostTagsInput!
      }

      input TagWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        postTags_every: PostTagWhereInput
        postTags_some: PostTagWhereInput
        postTags_none: PostTagWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [TagWhereInput!]
        OR: [TagWhereInput!]
        NOT: [TagWhereInput!]
      }

      input TagWhereUniqueInput {
        id: UUID
      }

      type User {
        id: UUID!
        name: String!
        phoneNumber: String!
        address: Json!
        bio: String
        dob: DateTime
        avatar: Image
        settings: Json
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type UserConnection {
        pageInfo: PageInfo!
        edges: [UserEdge]!
        aggregate: AggregateUser!
      }

      input UserCreateInput {
        id: UUID
        name: String!
        phoneNumber: String!
        address: Json!
        bio: String
        dob: DateTime
        avatar: ImageCreateOneInput
        settings: Json
        account: AccountCreateOneWithoutUsersInput!
      }

      input UserCreateManyWithoutAccountInput {
        create: [UserCreateWithoutAccountInput!]
        connect: [UserWhereUniqueInput!]
      }

      input UserCreateWithoutAccountInput {
        id: UUID
        name: String!
        phoneNumber: String!
        address: Json!
        bio: String
        dob: DateTime
        avatar: ImageCreateOneInput
        settings: Json
      }

      type UserEdge {
        node: User!
        cursor: String!
      }

      enum UserOrderByInput {
        id_ASC
        id_DESC
        name_ASC
        name_DESC
        phoneNumber_ASC
        phoneNumber_DESC
        address_ASC
        address_DESC
        bio_ASC
        bio_DESC
        dob_ASC
        dob_DESC
        settings_ASC
        settings_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type UserPreviousValues {
        id: UUID!
        name: String!
        phoneNumber: String!
        address: Json!
        bio: String
        dob: DateTime
        settings: Json
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input UserScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        phoneNumber: String
        phoneNumber_not: String
        phoneNumber_in: [String!]
        phoneNumber_not_in: [String!]
        phoneNumber_lt: String
        phoneNumber_lte: String
        phoneNumber_gt: String
        phoneNumber_gte: String
        phoneNumber_contains: String
        phoneNumber_not_contains: String
        phoneNumber_starts_with: String
        phoneNumber_not_starts_with: String
        phoneNumber_ends_with: String
        phoneNumber_not_ends_with: String
        bio: String
        bio_not: String
        bio_in: [String!]
        bio_not_in: [String!]
        bio_lt: String
        bio_lte: String
        bio_gt: String
        bio_gte: String
        bio_contains: String
        bio_not_contains: String
        bio_starts_with: String
        bio_not_starts_with: String
        bio_ends_with: String
        bio_not_ends_with: String
        dob: DateTime
        dob_not: DateTime
        dob_in: [DateTime!]
        dob_not_in: [DateTime!]
        dob_lt: DateTime
        dob_lte: DateTime
        dob_gt: DateTime
        dob_gte: DateTime
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [UserScalarWhereInput!]
        OR: [UserScalarWhereInput!]
        NOT: [UserScalarWhereInput!]
      }

      type UserSubscriptionPayload {
        mutation: MutationType!
        node: User
        updatedFields: [String!]
        previousValues: UserPreviousValues
      }

      input UserSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: UserWhereInput
        AND: [UserSubscriptionWhereInput!]
        OR: [UserSubscriptionWhereInput!]
        NOT: [UserSubscriptionWhereInput!]
      }

      input UserUpdateInput {
        name: String
        phoneNumber: String
        address: Json
        bio: String
        dob: DateTime
        avatar: ImageUpdateOneInput
        settings: Json
        account: AccountUpdateOneRequiredWithoutUsersInput
      }

      input UserUpdateManyDataInput {
        name: String
        phoneNumber: String
        address: Json
        bio: String
        dob: DateTime
        settings: Json
      }

      input UserUpdateManyMutationInput {
        name: String
        phoneNumber: String
        address: Json
        bio: String
        dob: DateTime
        settings: Json
      }

      input UserUpdateManyWithoutAccountInput {
        create: [UserCreateWithoutAccountInput!]
        delete: [UserWhereUniqueInput!]
        connect: [UserWhereUniqueInput!]
        set: [UserWhereUniqueInput!]
        disconnect: [UserWhereUniqueInput!]
        update: [UserUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [UserUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [UserScalarWhereInput!]
        updateMany: [UserUpdateManyWithWhereNestedInput!]
      }

      input UserUpdateManyWithWhereNestedInput {
        where: UserScalarWhereInput!
        data: UserUpdateManyDataInput!
      }

      input UserUpdateWithoutAccountDataInput {
        name: String
        phoneNumber: String
        address: Json
        bio: String
        dob: DateTime
        avatar: ImageUpdateOneInput
        settings: Json
      }

      input UserUpdateWithWhereUniqueWithoutAccountInput {
        where: UserWhereUniqueInput!
        data: UserUpdateWithoutAccountDataInput!
      }

      input UserUpsertWithWhereUniqueWithoutAccountInput {
        where: UserWhereUniqueInput!
        update: UserUpdateWithoutAccountDataInput!
        create: UserCreateWithoutAccountInput!
      }

      input UserWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        phoneNumber: String
        phoneNumber_not: String
        phoneNumber_in: [String!]
        phoneNumber_not_in: [String!]
        phoneNumber_lt: String
        phoneNumber_lte: String
        phoneNumber_gt: String
        phoneNumber_gte: String
        phoneNumber_contains: String
        phoneNumber_not_contains: String
        phoneNumber_starts_with: String
        phoneNumber_not_starts_with: String
        phoneNumber_ends_with: String
        phoneNumber_not_ends_with: String
        bio: String
        bio_not: String
        bio_in: [String!]
        bio_not_in: [String!]
        bio_lt: String
        bio_lte: String
        bio_gt: String
        bio_gte: String
        bio_contains: String
        bio_not_contains: String
        bio_starts_with: String
        bio_not_starts_with: String
        bio_ends_with: String
        bio_not_ends_with: String
        dob: DateTime
        dob_not: DateTime
        dob_in: [DateTime!]
        dob_not_in: [DateTime!]
        dob_lt: DateTime
        dob_lte: DateTime
        dob_gt: DateTime
        dob_gte: DateTime
        avatar: ImageWhereInput
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [UserWhereInput!]
        OR: [UserWhereInput!]
        NOT: [UserWhereInput!]
      }

      input UserWhereUniqueInput {
        id: UUID
      }

      scalar UUID
    `,
};
